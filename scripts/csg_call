#!/bin/bash

sw_opt=""

#we have to dedine this if $SOURCE_WRAPPER functions common fails
die() {
  echo -e "$*" >&2
  exit 1
}

show_help () {
  cat << eof
This script calls script for csg using source_wrapper
Usage: ${0##*/} key1 key2
OPTIONS:
-l, --list          Show list of all script
    --check         Check csg script
    --scriptdir DIR Set the user script dir
    --xmlfile FILE  Specify the xml file to use
    --ia-type type  Specify the interaction type to use
    --ia-name name  Specify the interaction name to use
-h, --help          Show this help

Example: ${0##*/} table smooth [ARGUMENTS]

USES: \$CSGSHARE
NEEDS:
eof
}


while [ "${1#-}" != "$1" ]; do
 if [ "${1#--}" = "$1" ] && [ -n "${1:2}" ]; then
    #short opt with arguments here: fc
    if [ "${1#-[fc]}" != "${1}" ]; then
       set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
       set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
   -l | --list)
    #we can not run it directly here SOURCE_WRAPPER is defined later
    sw_opt="--status"
    shift ;;
   --check)
    #we can not run it directly here SOURCE_WRAPPER is defined later
    sw_opt="--check"
    shift ;;
   --scriptdir)
    export CSGSCRIPTDIR="$2"
    shift 2;; 
   --xmlfile)
    export CSGXMLFILE="$2"
    shift 2;; 
   --ia-type)
    export ia_type="$2"
    shift 2;; 
   --ia-name)
    export ia_name="$2"
    shift 2;; 
   -h | --help)
    show_help
    exit 0;;
  *)
   die "Unknown option '$1'";;
 esac
done

[ -z "$2" ] && [ -z "$sw_opt" ] && die "${0##*/}: Missing argument"

[ -n "${CSGSHARE}" ] || die "${0##*/}: Environment values CSGSHARE not defined"

echo \$CSGSHARE is ${CSGSHARE}

export CSGINVERSE=$CSGSHARE/scripts/inverse
export PERL5LIB="$CSGINVERSE:$PERL5LIB"
[ -d "$CSGINVERSE" ] || die "${0##*/}: CSGINVERSE '$CSGINVERSE' is not a dir"

export SOURCE_WRAPPER=$CSGINVERSE/source_wrapper.pl
[ -x "$SOURCE_WRAPPER" ] || die "${0##*/}: Could not execute source wrapper"

source $($SOURCE_WRAPPER functions common) || die "$SOURCE_WRAPPER functions common failed"

if [ -n "${CSGSCRIPTDIR}" ]; then 
  [ -d "$CSGSCRIPTDIR" ] || die "${0##*/}: CSGSCRIPTDIR '$CSGSCRIPTDIR' is not a dir"
  echo \$CSGSCRIPTDIR is ${CSGSCRIPTDIR}
  export PERL5LIB="$CSGSCRIPTDIR:$PERL5LIB"
fi

if [ -n "$sw_opt" ]; then
  $SOURCE_WRAPPER $sw_opt
  exit 0
fi

needs="$(do_external $1 $2 --help)"
needs="$(echo "$needs" | sed -n 's/^NEEDS: \+\(.*\) *$/\1/p')"
[ -n "$needs" ] && [ -z "$CSGXMLFILE" ] && die "Script '$1 $2' will need some options ($needs) from the xml file\nPlease specify it with --xmlfile option"
[ -n "$CSGXMLFILE" ] && [ ! -f "$CSGXMLFILE" ] && die "xmlfile '$CSGXMLFILE' not found"

interaction=""

for i in $needs; do
  [ -n "${i#cg.*}" ] && interaction="$interaction $i" 
done
interaction=${interaction# }
if [ -n "$interaction" ]; then
  [ -z "${ia_type}" ] && die "Script '$1 $2' will need interaction options ($interaction) from the xml file\nPlease specify the interaction type with --ia-type option"
  [ -z "${ia_name}" ] && die "Script '$1 $2' will need interaction options ($interaction) from the xml file\nPlease specify the interaction name with --ia-name option"
fi

do_external $@
